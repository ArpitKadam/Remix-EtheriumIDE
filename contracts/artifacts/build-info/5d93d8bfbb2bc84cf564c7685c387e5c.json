{
	"id": "5d93d8bfbb2bc84cf564c7685c387e5c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/data_types.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ncontract DataTypes{\r\n\r\n    // bool public hey;\r\n    // bool public no = true;\r\n\r\n    // UINT means Non-negative integers\r\n\r\n    // uint8 public myUint8; // range 0 - 2^8 ==>> 256 - 1\r\n    // uint16 public myUint16; // range 0 - 2^16 ==>> 65,53 - 1\r\n    // uint32 public myUint32; // range 0 - 2^32 ==>> 4,294,967,295 - 1\r\n    // uint64 public myUint64; //range 0->2^64 - 1\r\n    // uint256 public nyUint256; // range 0 -> 2^256 - 1\r\n\r\n    // INT means Negative Integers are allowed\r\n\r\n    // int256 public myInt256; // ranges from -2,147,483,648 to 2,147,483,647\r\n    // int96 public myInt96;// -range of 0->96 as an example. The range is from -56 and 96\r\n    // int24 public myInt24; // -range of 0 to 8,388,607 , the ranges are from -12,800 to 12,800\r\n    // int16 public myInt16;// -range of 0->16 as an example. The range is from -32,768 to 32,768\r\n    // int8 public myInt8; // -range of 0 >95 as an example\r\n\r\n    // Now you can add min and max int\r\n\r\n    // int public minInt = type(int).min;\r\n    // int public maxInt = type(int).max;\r\n\r\n    // ARRAY \r\n        // -- fixed-sized bytes arrays\r\n        // -- dynamically-sized bytes arrays\r\n\r\n    // bytes1 public a;\r\n    // bytes2 public b;\r\n    // bytes3 public c;\r\n    // bytes4 public d;\r\n    // bytes5 public e;\r\n    // bytes6 public f;\r\n    // bytes7 public g;\r\n    // bytes8 public h;  // the range of this is from 0 to 12,800 as an example. The range is from 0->96\r\n\r\n    // bytes1 public i = 0xb9; \r\n    // bytes5 public j = \"Hello\"; // string type\r\n    // bytes8 public k = \"\\x04\\x02\\x03\\x0a\\x06\\x0d\\x08\\x00\";// This is not going to be same as bytearray\r\n        // 0xb9 means b, 0xa1 means a, 0x0c means c etc. And the bytes are stored in hex format as an example\r\n    // and this is how you convert it into bytes\r\n    // bytes7 public l = \"\\xc3\\xd8\";// \"C\" + \"\\xe9\"; \r\n        // \\xc3 means c, \\xb9 means b , the hex form of these are stored as an example. You can see that this is not same\r\n    // bytes25 public m;   // a dynamic-sized byte array\r\n\r\n    // bytes19 public n = \"Hello how are you? \";\r\n\r\n    // ADDRESS Types\r\n\r\n    // address public hey;\r\n    // address public me = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 ;\r\n\r\n    // DEFAULT VALUES\r\n\r\n    // bool public defaultbool; // false, because by default a boolean type has a default value\r\n    // address public addressy;// Default value of an address is null. So the default address is 0x0\r\n    // uint256 public defaultUint; // The default value of a uint256 type is zero (which is hex: \"0\").\r\n    // string public defaultString;// empty\r\n    // int256 public defaulInt;// 0\r\n    \r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/data_types.sol": {
				"DataTypes": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/data_types.sol\":63:2678  contract DataTypes{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/data_types.sol\":63:2678  contract DataTypes{... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122029e1e0facf6f8e878d40ec04df139052b64191fc81f94d123ef02efbac05915864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea264697066735822122029e1e0facf6f8e878d40ec04df139052b64191fc81f94d123ef02efbac05915864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xE1 0xE0 STATICCALL 0xCF PUSH16 0x8E878D40EC04DF139052B64191FC81F9 0x4D SLT RETURNDATACOPY CREATE 0x2E 0xFB 0xAC SDIV SWAP2 PC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "63:2615:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea264697066735822122029e1e0facf6f8e878d40ec04df139052b64191fc81f94d123ef02efbac05915864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xE1 0xE0 STATICCALL 0xCF PUSH16 0x8E878D40EC04DF139052B64191FC81F9 0x4D SLT RETURNDATACOPY CREATE 0x2E 0xFB 0xAC SDIV SWAP2 PC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "63:2615:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 2678,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122029e1e0facf6f8e878d40ec04df139052b64191fc81f94d123ef02efbac05915864736f6c634300081a0033",
									".code": [
										{
											"begin": 63,
											"end": 2678,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 63,
											"end": 2678,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 63,
											"end": 2678,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 63,
											"end": 2678,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 2678,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 63,
											"end": 2678,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/data_types.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data_types.sol\":\"DataTypes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/data_types.sol\":{\"keccak256\":\"0x07581a8caacd01ae0ab61cfba98b2fd914e40d32d1ac99cfc2a4531460b2ff3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://48bf23a4d001b7a8be77137c1066ee2b13c6bf1cf5c40d757619b5b774cc55d2\",\"dweb:/ipfs/QmcL9X6FRNQ331TZf8ZB3fJAseQFUAg1MCwdJMmbiHjzYr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/data_types.sol": {
				"ast": {
					"absolutePath": "contracts/data_types.sol",
					"exportedSymbols": {
						"DataTypes": [
							2
						]
					},
					"id": 3,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DataTypes",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "DataTypes",
							"nameLocation": "72:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "63:2615:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "35:2645:0"
				},
				"id": 0
			}
		}
	}
}